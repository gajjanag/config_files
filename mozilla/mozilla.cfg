//
// API's
lockPref("geo.enabled", false);
lockPref("beacon.enabled", false);
lockPref("dom.gamepad.enabled", false);
lockPref("device.sensors.enabled", false);
lockPref("dom.vr.enabled", false);
lockPref("dom.webnotifications.enabled", false);
lockPref("dom.battery.enabled", false);
lockPref("dom.telephony.enabled", false);
lockPref("media.peerconnection.ice.default_address_only", true);
lockPref("media.peerconnection.ice.no_host", true);
lockPref("media.peerconnection.enabled", false);
lockPref("loop.logDomains", false);
lockPref("media.navigator.enabled", false);
lockPref("media.getusermedia.screensharing.enabled", false);
lockPref("media.webspeech.recognition.enable", false);
lockPref("webgl.disabled", true);
lockPref("pdfjs.enableWebGL", false);
lockPref("camera.control.face_detection.enabled", false);
lockPref("gfx.direct2d.disabled", true);
lockPref("layers.acceleration.disabled", true);
lockPref("dom.event.clipboardevents.enabled", false);
lockPref("dom.enable_performance", false);
lockPref("browser.send_pings", false);
lockPref("browser.send_pings.require_same_host", true);
lockPref("dom.mozTCPSocket.enabled", false);
lockPref("dom.webaudio.enabled", false);
lockPref("dom.indexedDB.enabled", false);
// technically, it may be best to always disable dom.storage
// however, it honors cookie preferences, and in particular is session-only
// with this config, and also yields less to panopticlick
// also (minor): gives less bits of info to panopticlick
//lockPref("dom.storage.enabled", false);
lockPref("javascript.options.asmjs", false);
lockPref("javascript.options.wasm", false);

// DRM
lockPref("media.eme.enabled", false);
lockPref("media.eme.apiVisible", false);

// Pocket
lockPref("browser.pocket.enabled", false);
lockPref("extensions.pocket.enabled", false);

// Sync
lockPref("services.sync.enabled", false);

// Some fingerprinting
lockPref("media.video_stats.enabled", false);
lockPref("general.buildID.override", "20100101");
lockPref("browser.display.use_document_fonts", 0);

// Privacy
lockPref("privacy.trackingprotection.enabled", true);
lockPref("privacy.trackingprotection.pbmode.enabled", true);
lockPref("privacy.resistFingerprinting", true);
lockPref("privacy.sanitize.sanitizeOnShutdown", true);
lockPref("privacy.clearOnShutdown.cache", true);
lockPref("privacy.clearOnShutdown.cookies", true);
lockPref("privacy.clearOnShutdown.downloads", true);
lockPref("privacy.clearOnShutdown.formdata", true);
lockPref("privacy.clearOnShutdown.history", true);
lockPref("privacy.clearOnShutdown.offlineApps", true);
lockPref("privacy.clearOnShutdown.passwords", true);
lockPref("privacy.clearOnShutdown.sessions", true);
lockPref("privacy.clearOnShutdown.siteSettings", true);
lockPref("places.history.enabled", false);
lockPref("browser.formfill.enable", false);
lockPref("browser.formfill.expire_days", 0);
lockPref("signon.rememberSignons", false);
lockPref("browser.sessionstore.privacy_level", 2);
lockPref("browser.sessionstore.max_tabs_undo", 0);
lockPref("browser.sessionstore.max_windows_undo", 0);
lockPref("browser.privatebrowsing.autostart", true);
lockPref("browser.helperApps.deleteTempFileOnExit", true);
lockPref("datareporting.healthreport.uploadEnabled", false);
lockPref("datareporting.healthreport.service.enabled", false);
lockPref("datareporting.policy.dataSubmissionEnabled", false);
lockPref("browser.selfsupport.url", "");
lockPref("browser.search.defaultenginename", "DuckDuckGo");
lockPref("browser.search.geoSpecificDefaults", false);
lockPref("browser.search.order.1", "DuckDuckGo");
lockPref("browser.search.order.2", "Bing");
lockPref("browser.search.order.3", "Google");
lockPref("keyword.enabled", false);
lockPref("browser.safebrowsing.downloads.remote.enabled", false);
lockPref("toolkit.telemetry.enabled", false);
lockPref("toolkit.telemetry.unified", false);
lockPref("experiments.supported", false);
lockPref("experiments.enabled", false);
lockPref("devtools.webide.enabled", false);
lockPref("devtools.webide.autoinstallADBHelper", false);
lockPref("devtools.webide.autoinstallFxdtAdapters", false);
lockPref("devtools.debugger.remote-enabled", false);
lockPref("devtools.chrome.enabled", false);
lockPref("devtools.debugger.force-local", true);
lockPref("browser.search.geoip.url", "");
lockPref("browser.aboutHomeSnippets.updateUrl", "");
lockPref("browser.search.suggest.enabled", false);
lockPref("browser.urlbar.suggest.searches", false);
lockPref("network.cookie.lifetimePolicy", 2);
lockPref("network.cookie.cookieBehavior", 1);
lockPref("network.cookie.thirdparty.sessionOnly", true);
lockPref("prefs.privacy.disable_button.view_cookies", false);
lockPref("browser.casting.enabled", false);
lockPref("privacy.donottrackheader.enabled", false);
lockPref("noscript.doNotTrack.enabled", false);
// Wolfram Alpha needs referer header stuff
//lockPref("network.http.sendRefererHeader", 1);
lockPref("network.http.referer.spoofSource", true);
// user agent string spoofing is a great idea in principle, but fails in practice
// for 2 reasons
// 1. it requires constant updates to ensure it is in sync
// 2. it can cause problems with some (mostly broken) websites.
// hence commented out by default
//lockPref("general.useragent.override", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0");

// Privacy and performance
lockPref("network.prefetch-next", false);
lockPref("network.dns.disablePrefetch", true);
lockPref("network.dns.blockDotOnion", true);
lockPref("network.http.speculative-parallel-limit", 0);
lockPref("network.predictor.enabled", false);

// Security
lockPref("network.proxy.socks_remote_dns", true);
lockPref("network.manage-offline-status", false);
lockPref("plugin.state.flash", 0);
lockPref("extensions.getAddons.cache.enabled", false);
lockPref("extensions.update.enabled", true);
lockPref("extensions.blocklist.enabled", true);
lockPref("pdfjs.disabled", true);
lockPref("security.xpconnect.plugin.unrestricted", false);
lockPref("security.mixed_content.block_active_content", true);
lockPref("security.mixed_content.block_display_content", true);
lockPref("network.jar.open-unsafe-types", false);
lockPref("browser.urlbar.filter.javascript", true);
lockPref("security.fileuri.strict_origin_policy", true);
lockPref("browser.fixup.alternate.enabled", false);
lockPref("browser.safebrowsing.malware.enabled", true);
lockPref("browser.safebrowsing.enabled", true);
lockPref("security.csp.enable", true);
lockPref("security.csp.experimentalEnabled", true);
lockPref("network.IDN_show_punycode", true);

// Security related to UI
lockPref("clipboard.autocopy", false);
lockPref("gfx.font_rendering.opentype_svg.enabled", false);
lockPref("plugins.click_to_play", true);
lockPref("plugins.update.notifyUser", false);
lockPref("accessibility.blockautorefresh", true);
lockPref("browser.download.folderList", 2);
lockPref("browser.download.dir", "/tmp");
lockPref("browser.download.useDownloadDir", true);
lockPref("layout.css.visited_links_enabled", false);
lockPref("signon.autofillForms", false);

// General UI
lockPref("browser.newtabpage.enhanced", false);
lockPref("browser.newtabpage.enabled", false);
lockPref("browser.newtab.url", "about:blank");
lockPref("browser.newtab.preload", false);
lockPref("browser.newtabpage.directory.ping", "");
lockPref("browser.newtabpage.directory.source", "data:text/plain,{}");
lockPref("general.warnOnAboutConfig", false);
lockPref("browser.tabs.warnOnClose", false);
lockPref("browser.link.open_newwindow", 3);
lockPref("browser.shell.checkDefaultBrowser", false);
lockPref("browser.urlbar.autoFill", false);
lockPref("browser.urlbar.autoFill.typed", false);
lockPref("browser.urlbar.autocomplete.enabled", false);
lockPref("browser.urlbar.maxRichResults", 0);

// Disk cache seetings
lockPref("browser.cache.disk.enable", false);
lockPref("browser.cache.disk_cache_ssl", false);
lockPref("browser.cache.disk.smart_size.enabled", false);
lockPref("browser.cache.disk.capacity", 0);
lockPref("browser.cache.offline.enable", false);
lockPref("browser.cache.offline.capacity", 0);
lockPref("browser.pagethumbnails.capturing_disabled", true);
lockPref("browser.offline-apps.notify", true);

// Low level TLS/SSL
lockPref("security.cert_pinning.enforcement_level", 2);
lockPref("security.pki.sha1_enforcement_level", 1);
lockPref("security.ssl.treat_unsafe_negotiation_as_broken", true);
