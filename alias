if [ "$(uname -s)" = "Darwin" ]; then
    is_mac=true
fi
if command -v nvim >/dev/null 2>&1 ; then
    has_nvim=true
fi

# colorize stuff
if test -t 1 && which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
    if test -n "$ncolors" && test $ncolors -ge 8; then
        bold_color=$(tput bold)
        normal_color=$(tput setaf 2)
        warn_color=$(tput setaf 3)
        error_color=$(tput setaf 1)
        reset_color=$(tput sgr0)
    fi
fi

echo_bad() {
    echo "$error_color$bold_color$@$reset_color"
}

echo_good() {
    echo "$normal_color$bold_color$@$reset_color"
}

# Some aliases. Most are from the arch wiki
## Modified commands ## {{{ alias diff='colordiff'              # requires colordiff package
alias grep='grep --color=auto'
alias more='less'
alias df='df -h'
alias du='du -c -h'
alias mkdir='mkdir -p -v'
alias nano='nano -w'
alias ping='ping -c 5'
alias dmesg='dmesg -HL'
if [ "$has_nvim" = "true" ]; then
    alias vi='nvim'
    alias vim='nvim'
else
    alias vi='vim'
fi
alias qpdfview='qpdfview --unique'

alias mutt='cd ~/Downloads && mutt'
alias reboot='systemctl reboot'
alias shutdown='systemctl poweroff'
alias suspend='systemctl suspend'
alias chromium='chromium -incognito'
# }}}

## New commands ## {{{
alias da='date "+%A, %B %d, %Y [%T]"'
alias hist='history | grep'         # requires an argument
alias openports='ss --all --numeric --processes --ipv4 --ipv6'
alias pgg='ps -Af | grep'           # requires an argument
alias ..='cd ..'
alias stop='kill -TSTP'
alias setclip='xclip -selection c'
alias getclip='xclip -selection clipboard -o'
# }}}

## Custom commands ## {{{
alias screendim='xbacklight -set 5'
alias screenbright='xbacklight -set 100'
alias torrent='transmission-cli'
alias pacmirr='sudo reflector --verbose --latest 25 --sort rate --save /etc/pacman.d/mirrorlist'
alias g++11='g++ -march=native -O3 -W -Wall -Wextra -pedantic -std=c++11'
alias gcc11='gcc -march=native -O3 -W -Wall -Wextra -Wshadow -pedantic -std=c11'
alias androidmount='jmtpfs ~/mtp'
alias androidumount='fusermount -u ~/mtp'
alias usbmount='mount /mnt/usb'
alias usbumount='umount /mnt/usb'
if [ "$is_mac" = "true" ]; then
    alias i3lock='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'
else
    alias i3lock='i3lock -c 000000'
fi
alias gp='/usr/bin/gp'

# This is needed for incompatibilites regarding string splitting.
args() {
    echo $*
}

# Backup stuff.
user_name=gajjanag
imp_dirs=".ssh \
.keys \
temp \
books \
courses \
dev \
ganesh \
research \
doc"
extra_dirs="videos \
music \
photos \
projects"
src_loc="/home/$user_name"
backup_loc=$user_name@athena.dialup.mit.edu:Private
storage_loc1="/home/$user_name/storage_wd1"
storage_loc2="/home/$user_name/storage_wd2"
local_dirs=""
full_local_dirs=""
remote_dirs=""
storage_dirs=""
for dir in $(args $imp_dirs); do
    local_dirs="${local_dirs} $src_loc/$dir"
    remote_dirs="${remote_dirs} $backup_loc/$dir"
    storage1_dirs="${storage1_dirs} $storage_loc1/$dir"
    storage2_dirs="${storage2_dirs} $storage_loc2/$dir"
    full_local_dirs="${full_local_dirs} $src_loc/$dir"
done
for dir in $(args $extra_dirs); do
    full_local_dirs="${full_local_dirs} $src_loc/$dir"
    storage1_dirs="${storage1_dirs} $storage_loc1/$dir"
    storage2_dirs="${storage2_dirs} $storage_loc2/$dir"
done
is_mounted() {
    findmnt -rno SOURCE,TARGET "$1" >/dev/null #path or device
}
athenasync() {
    prev_alias=$(alias rsync)
    unalias rsync
    eval "rsync -av --delete $local_dirs $backup_loc"
    alias "$prev_alias"
}
storagesync() {
    mount $storage_loc1
    d1=$?
    mount $storage_loc2
    d2=$?
    if [ $d1 -ne 0 ]  && [ $d2 -ne 0 ]; then
        echo_bad "External drives not mounted, exiting!"
        return 1
    else
        if [ $d1 -eq 0 ]; then
            echo_good "External drive 1 mounted, syncing to it"
            prev_alias=$(alias rsync)
            unalias rsync
            eval "rsync -av --delete $full_local_dirs $storage_loc1"
            alias "$prev_alias"
            echo_good "Unmounting drive 1"
            umount $storage_loc1
        fi
        if [ $d2 -eq 0 ]; then
            echo_good "External drive 2 mounted, syncing to it"
            prev_alias=$(alias rsync)
            unalias rsync
            eval "rsync -av --delete $full_local_dirs $storage_loc2"
            alias "$prev_alias"
            echo_good "Unmounting drive 2"
            umount $storage_loc2
        fi
    fi
}
athenarestore() {
    prev_alias=$(alias rsync)
    unalias rsync
    eval "rsync -av --delete $remote_dirs $src_loc"
    alias "$prev_alias"
}
storagerestore() {
    mount $storage_loc1
    d1=$?
    if [ $d1 -ne 0 ]; then
        echo_bad "External drive 1 not mounted, exiting!"
        return 1
    else
        prev_alias=$(alias rsync)
        unalias rsync
        eval "rsync -av --delete $storage1_dirs $src_loc"
        alias "$prev_alias"
        umount $storage_loc1
    fi
}

# audio playback from command line
play() {
    mpv --no-resume-playback --no-video --ytdl-format=bestaudio ytdl://ytsearch10:"$@"
}

project() {
    screen_res=$(xdpyinfo | awk '/dimensions/{print $2}')
    xrandr --output HDMI1 --auto --scale-from $screen_res
}

# plaintext web browsing given URL
# useful for e.g reading articles behind paywall such as Wall Street Journal
# I got this from https://news.ycombinator.com/item?id=14389986
web_view() {
    curl "$@" | sed -n '/./{/<title/,/<\/title/p;/<p>/,/<\/p>/p;}' | vim -
}

# merge pdf's using ghostscript
pdfmerge() {
    /usr/bin/gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile=$@
}

# Privileged access
if [ $UID -ne 0 ]; then
    alias sudo='sudo '
    alias scat='sudo cat'
    alias svim='sudoedit'
    alias root='sudo -s'
    alias reboot='sudo systemctl reboot'
    alias poweroff='sudo systemctl poweroff'
    alias update='sudo pacmatic -Syu'
    alias netctl='sudo netctl'
fi

## ls ## {{{
if [ "$is_mac" = "true" ]; then
    alias ls='ls -G'
else
    alias ls='ls -hF --color=auto'
fi
alias lr='ls -R'                    # recursive ls
alias ll='ls -l'
alias lA='ls -A'
alias la='ll -A'
alias lx='ll -BX'                   # sort by extension
alias lz='ll -rS'                   # sort by size
alias lt='ll -rt'                   # sort by date
alias lm='la | more'
# }}}

## git ##
alias gr='cd $(git rev-parse --show-toplevel)'
alias gus='git submodule foreach git pull origin master'

## Safety features ## {{{
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias cls=' echo -ne "\033c"'       # clear screen for real (it does not work in Terminology)
# }}}

## Make shell error tolerant ## {{{
alias :q=' exit'
alias :Q=' exit'
alias :x=' exit'
alias cd..='cd ..'
# }}}
